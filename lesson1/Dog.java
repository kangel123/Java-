package lesson1;

import java.util.*;
class Dog {
	public int solution(int[][] board){
		int[] answer = new int[2];

		int[][] b = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };		// 3시, 6시, 9시, 12시
		int t1 = 3;	// 현수의 현재 방향
		int t2 = 3;	// 강아지의 현재 방향
		int x1=0;	// 현수의 행
		int y1=0;	// 현수의 열
		int x2=0;	// 강아지의 행
		int y2=0;	// 강아지의 열
		
		// 현수 위치 찾기
		for(int i=0;i<10;i++) {
			for(int j=0;j<10;j++) {
				if(board[i][j]==2) {
					x1=i;
					y1=j;
					
				}
			}
		}
		
		// 강아지 찾기
		for(int i=0;i<10;i++) {
			for(int j=0;j<10;j++) {
				if(board[i][j]==3) {
					x2=i;
					y2=j;
					
				}
			}
		}

		for (int n = 0; n < 10000; n++) {
			
			// 같은 위치면 종료
			if(x1==x2 && y1==y2) {
				return n;
			}
			
			// 현수 이동
			x1 += b[t1][0];
			y1 += b[t1][1];
			if (x1 >= 10 || y1 >= 10 || x1 < 0 || y1 < 0 || board[x1][y1] == 1) {	// 범위를 벗어나거나 나무가 있으면
				x1 -= b[t1][0];
				y1 -= b[t1][1];
				t1 += 1;
				if (t1 == 4) t1 = 0;
			} else{	// 그외 빈공간
				answer[0] = x1;
				answer[1] = y1;
			}
			
			// 강아지 이동
			x2 += b[t2][0];
			y2 += b[t2][1];
			if (x2 >= 10 || y2 >= 10 || x2 < 0 || y2 < 0 || board[x2][y2] == 1) {	// 범위를 벗어나거나 나무가 있으면
				x2 -= b[t2][0];
				y2 -= b[t2][1];
				t2 += 1;
				if (t2 == 4) t2 = 0;
			} else{	// 그외 빈공간
				answer[0] = x2;
				answer[1] = y2;
			}
		}
		
		return 0;	
	}

	public static void main(String[] args){
		Dog T = new Dog();
		int[][] arr1 = {
			{0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, 
			{0, 0, 0, 0, 1, 0, 0, 0, 0, 0}, 
			{0, 0, 0, 1, 0, 0, 0, 1, 0, 0}, 
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			{0, 0, 0, 1, 0, 0, 0, 2, 0, 0}, 
			{1, 0, 0, 0, 0, 0, 1, 0, 0, 0}, 
			{0, 0, 0, 1, 0, 0, 0, 0, 0, 0}, 
			{0, 0, 0, 0, 0, 3, 0, 0, 0, 1}, 
			{0, 0, 0, 1, 0, 1, 0, 0, 0, 0}, 
			{0, 1, 0, 1, 0, 0, 0, 0, 0, 0}}; 
		System.out.println(T.solution(arr1));
		int[][] arr2 = {
			{1, 0, 0, 0, 1, 0, 0, 0, 0, 0}, 
			{0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, 
			{0, 0, 1, 1, 0, 0, 0, 1, 0, 0}, 
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
			{0, 0, 0, 1, 0, 1, 0, 0, 0, 0}, 
			{1, 0, 0, 0, 0, 0, 1, 0, 1, 0}, 
			{0, 0, 0, 1, 0, 0, 0, 0, 0, 0}, 
			{0, 0, 1, 0, 0, 0, 0, 0, 2, 1}, 
			{0, 0, 0, 1, 0, 1, 0, 0, 0, 1}, 
			{0, 1, 0, 1, 0, 0, 0, 0, 0, 3}}; 
		System.out.println(T.solution(arr2));
	}
}